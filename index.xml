<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>✦ 个人记录 ✧ 𝑳𝒐𝒏𝒈 𝑯𝒆 ✦</title>
    <link>http://helong0102.github.io/</link>
    <description>Recent content on ✦ 个人记录 ✧ 𝑳𝒐𝒏𝒈 𝑯𝒆 ✦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Sep 2024 01:37:56 +1300</lastBuildDate><atom:link href="http://helong0102.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于</title>
      <link>http://helong0102.github.io/about/</link>
      <pubDate>Sat, 20 Aug 2022 21:38:52 +0800</pubDate>
      
      <guid>http://helong0102.github.io/about/</guid>
      <description>关于 本博客要用于记录学习笔记与科研心得，分享区块链领域的研究进展与个人思考。 1 2 3 4 5 6 7 / / // / / / / ___ __ ___ //___ / / ___ / / // ) ) // ) ) // ) )</description>
    </item>
    
    <item>
      <title>SSH connect to host github.com port 22 - Connection refused</title>
      <link>http://helong0102.github.io/post/ssh-connet-to-host-github.com-port-22-connection-refused/</link>
      <pubDate>Thu, 05 Sep 2024 01:37:56 +1300</pubDate>
      
      <guid>http://helong0102.github.io/post/ssh-connet-to-host-github.com-port-22-connection-refused/</guid>
      <description>SSH connect to host github.com port 22 - Connection refused 问题 Windows系统，在个人电脑上使用Git命令操作GitHub上的仓库，突然提示错误：ssh: connect to host github.com port 22: Connection refu</description>
    </item>
    
    <item>
      <title>GitHub: Permission denied (publickey)</title>
      <link>http://helong0102.github.io/post/github-permission-denied-publickey/</link>
      <pubDate>Thu, 05 Sep 2024 01:37:56 +1400</pubDate>
      
      <guid>http://helong0102.github.io/post/github-permission-denied-publickey/</guid>
      <description>GitHub: Permission denied (publickey) 错误 在使用git命令 git push -u origin master , 出现如下报错： 1 2 3 4 git@github.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 解决步骤 Permission denied (publickey) 没有权限的pub</description>
    </item>
    
    <item>
      <title>Linux常用操作记录</title>
      <link>http://helong0102.github.io/post/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 06 Jan 2024 01:37:56 +1716</pubDate>
      
      <guid>http://helong0102.github.io/post/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</guid>
      <description>Linux常用操作记录 用户相关 id - 显示用户的详细信息（uid、gid 和 group） last - 列出有关最近登录的信息，包括时间、用户名、IP地址和会</description>
    </item>
    
    <item>
      <title>使用docker测试智能合约</title>
      <link>http://helong0102.github.io/post/%E4%BD%BF%E7%94%A8docker%E6%B5%8B%E8%AF%95%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</link>
      <pubDate>Wed, 17 May 2023 01:37:56 +2200</pubDate>
      
      <guid>http://helong0102.github.io/post/%E4%BD%BF%E7%94%A8docker%E6%B5%8B%E8%AF%95%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</guid>
      <description>使用docker测试智能合约 docker使用说明 运行镜像指令 1 docker run -it --privileged=true -v /home/helong/oyente/tmp:/oyente/contract --name oyente luongnguyen/oyente 退出容器 1 ctrl + p + q 查看正在运行的容器 1 docker ps 重新进入后台运行</description>
    </item>
    
    <item>
      <title>Anaconda的安装及使用</title>
      <link>http://helong0102.github.io/post/anaconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 12 May 2023 01:37:56 +1300</pubDate>
      
      <guid>http://helong0102.github.io/post/anaconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>Anaconda的安装及使用 下载 前往官方下载页面下载； 或者前往清华大学开源软件镜像站下载。 安装 可以直接把下载的安装包（例如 “Anaconda</description>
    </item>
    
    <item>
      <title>Python虚环境的搭建及基本使用</title>
      <link>http://helong0102.github.io/post/python%E8%99%9A%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 19 Apr 2023 01:37:56 +1300</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E8%99%9A%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>Python虚环境的搭建及基本使用 虚拟环境的优势 Python虚拟环境（Virtual Environment）是一种在同一台机器上同时运行多个</description>
    </item>
    
    <item>
      <title>python 单例模式</title>
      <link>http://helong0102.github.io/post/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 13 Sep 2022 01:37:56 +0900</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>python 单例模式 单例模式实现介绍 使用类名() 创建对象时，Python解释首先会调用__new()__方法为对象分配空间。 __new__是一个由ob</description>
    </item>
    
    <item>
      <title>souffle 语法</title>
      <link>http://helong0102.github.io/post/souffle%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 06 Sep 2022 01:37:56 +1900</pubDate>
      
      <guid>http://helong0102.github.io/post/souffle%E8%AF%AD%E6%B3%95/</guid>
      <description>souffle 语法 概述: souffle 中的主要语言元素是关系声明（relations）、事实(facts)、规则（rurle）、指令(instruction)。 关系</description>
    </item>
    
    <item>
      <title>动态规划（一）</title>
      <link>http://helong0102.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%80/</link>
      <pubDate>Sat, 03 Sep 2022 01:37:56 +2000</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%80/</guid>
      <description>动态规划（一） 常用模型-背包 01 背包问题 问题 ： 给N个物品和容量是V的背包，每个物品有两个属性，一个是物品的体积Vi,还有一个是物品的价值Wi。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL</title>
      <link>http://helong0102.github.io/post/c&#43;&#43;stl/</link>
      <pubDate>Fri, 02 Sep 2022 01:37:56 +0900</pubDate>
      
      <guid>http://helong0102.github.io/post/c&#43;&#43;stl/</guid>
      <description>STL vector, 变长数组，倍增的思想 1 2 3 4 5 6 7 8 size() 返回元素个数 empty() 返回是否为空 clear() 清空 front()/back() 返回第一个数/最后一个数 push_back() / pop_back() 向vector插入一个数/ 把vec</description>
    </item>
    
    <item>
      <title>哈希表</title>
      <link>http://helong0102.github.io/post/%E5%93%88%E5%B8%8C%E8%A1%A8/</link>
      <pubDate>Thu, 01 Sep 2022 01:37:56 +0900</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid>
      <description>哈希表 存储结构（冲突处理方式） 开放寻址法 添加 根据hash函数就算出对应的下标位置，然后再判断是否有冲突，有则继续判断下一个位置，直到无冲突为</description>
    </item>
    
    <item>
      <title>堆</title>
      <link>http://helong0102.github.io/post/%E5%A0%86/</link>
      <pubDate>Tue, 30 Aug 2022 01:37:56 +0800</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%A0%86/</guid>
      <description>堆 堆的作用 插入一个数 heap[ ++ size] = x; up(size); 求 集合当中的最小值。heap[1] 删除最小值。 heap[1] = heap[size]; size --; down(1); 删除任意一个元素。heap[k] = heap[size]; size --; down(k); up(k); 修改任</description>
    </item>
    
    <item>
      <title>以太坊智能合约静态分析</title>
      <link>http://helong0102.github.io/post/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 30 Aug 2022 01:37:56 +2000</pubDate>
      
      <guid>http://helong0102.github.io/post/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</guid>
      <description>以太坊智能合约静态分析 oyente 执行过程 https://paper.seebug.org/790/ Ethereum Virtual Machine Opcodes 查询EVM Opcode https://ethervm.io/ z3-solver z3-solver的使用方法 https://risuxx.github.io/2020/09/22/z3-solver/</description>
    </item>
    
    <item>
      <title>Trie</title>
      <link>http://helong0102.github.io/post/tire/</link>
      <pubDate>Mon, 29 Aug 2022 01:37:56 +1000</pubDate>
      
      <guid>http://helong0102.github.io/post/tire/</guid>
      <description>Trie Tire的作用 高效的存储和查找字符串集合的数据结构 存储&amp;amp;查找方式 查找的时候可以按照路径结合标记的方式进行查找 题目实例 Trie字符串</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>http://helong0102.github.io/post/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Mon, 29 Aug 2022 01:37:56 +1000</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>并查集 并查集的作用 将两个集合合并。 询问两个元素是否在一个集合当中。 并查集可以在近乎O(1)的时间复杂度完成这个操作。 基本原理 每个集合用一颗树</description>
    </item>
    
    <item>
      <title>oyente工具安装</title>
      <link>http://helong0102.github.io/post/oyente%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +0800</pubDate>
      
      <guid>http://helong0102.github.io/post/oyente%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</guid>
      <description>oyente工具安装 注意 ① python 的版本要大于 3.5，如果同时有 python2 和 python3，所有命令使用 python3 和 pip3。 ② Oyente 目前只支持 0.4.19 以下的 solidity 版本，最好的</description>
    </item>
    
    <item>
      <title>python数据序列-集合</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E9%9B%86%E5%90%88/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1200</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E9%9B%86%E5%90%88/</guid>
      <description>python数据序列集合——求交集、并集、差集 1、什么是集合 集合（set）是一个无序的不重复元素序列。 ① 天生去重 ② 无序 2、集合的定义 在pyt</description>
    </item>
    
    <item>
      <title>python数据序列-公共方法</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1357</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>python数据序列-公共方法 1、什么是公共方法 所谓的公共方法就是支持大部分数据序列。 2、常见公共方法1 运算符 描述 支持的容器类型 + 合并 字符串</description>
    </item>
    
    <item>
      <title>python数据类型转换&amp;运算符与if结构</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8Eif%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1400</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8Eif%E7%BB%93%E6%9E%84/</guid>
      <description>python数据类型转换&amp;amp;运算符与if结构 一、Python数据类型转换 1、Python数据类型的转换方法 函数 说明 int(x [,base ]) 将x转换为一个</description>
    </item>
    
    <item>
      <title>python注释&amp;变量&amp;数据类型&amp;输入输出</title>
      <link>http://helong0102.github.io/post/python%E6%B3%A8%E9%87%8A%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1400</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%B3%A8%E9%87%8A%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>python注释&amp;amp;变量&amp;amp;数据类型&amp;amp;输入输出 一、Python注释 1、Python注释的基本语法 ☆ 单行注释 单行注释，以&amp;</description>
    </item>
    
    <item>
      <title>python中的循环结构</title>
      <link>http://helong0102.github.io/post/python%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1500</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</guid>
      <description>python中的循环结构 一、Python中循环 1、循环的种类 在Python中，循环一共分为两大类：while循环与for循环 思考问题：whi</description>
    </item>
    
    <item>
      <title>python中的函数</title>
      <link>http://helong0102.github.io/post/python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1530</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</guid>
      <description>python中的函数 一、Python中函数的作用与使用步骤 1、函数的定义 基本语法： 1 2 3 4 def 函数名称([参数1, 参数2, ...]): 函数体 ... [return 返回值]</description>
    </item>
    
    <item>
      <title>python-文件操作</title>
      <link>http://helong0102.github.io/post/python-%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1600</pubDate>
      
      <guid>http://helong0102.github.io/post/python-%E6%96%87%E4%BB%B6/</guid>
      <description>python-文件操作 一、文件的基本操作 1、文件操作三步走 ① 打开文件 ② 读写文件 ③ 关闭文件 2、open函数打开文件 在Python，使用open</description>
    </item>
    
    <item>
      <title>python面向对象</title>
      <link>http://helong0102.github.io/post/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1620</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>python面向对象 一、面向对象的基本概念 1、面向对象中两个比较重要概念 ☆ 对象 对象，object，现实业务逻辑的一个动作实体就对应着OOP编</description>
    </item>
    
    <item>
      <title>python异常</title>
      <link>http://helong0102.github.io/post/python%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1650</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E5%BC%82%E5%B8%B8/</guid>
      <description>python异常 一、Python异常 1、什么是异常 当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的&amp;quo</description>
    </item>
    
    <item>
      <title>python模块&amp;包</title>
      <link>http://helong0102.github.io/post/python%E6%A8%A1%E5%9D%97%E5%8C%85/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +1705</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%A8%A1%E5%9D%97%E5%8C%85/</guid>
      <description>python模块、包 一、Python内置模块 1、什么是Python模块 Python 模块(Module)，是一个Python 文件，以 .py 结尾，包含了 Python 对象</description>
    </item>
    
    <item>
      <title>链表与邻接表</title>
      <link>http://helong0102.github.io/post/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +2000</pubDate>
      
      <guid>http://helong0102.github.io/post/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/</guid>
      <description>链表与邻接表 单链表 单链表中应用最多的是邻接表，邻接表多用于存储图和树。 表示说明： e[N]:表示某个点的值是多少· ne[N]:表示某个点指针（</description>
    </item>
    
    <item>
      <title>栈与队列</title>
      <link>http://helong0102.github.io/post/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</link>
      <pubDate>Sat, 27 Aug 2022 01:37:56 +2100</pubDate>
      
      <guid>http://helong0102.github.io/post/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</guid>
      <description>栈与队列 模拟栈 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include &amp;lt;iostream&amp;gt; using namespace std; const int N = 100010; // stk表示栈，tt表示栈顶下标 int stk[N], tt; // 入栈（插入） stk[ ++ tt] = x; //</description>
    </item>
    
    <item>
      <title>python数据序列-元组</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%85%83%E7%BB%84/</link>
      <pubDate>Fri, 26 Aug 2022 01:37:56 +1100</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%85%83%E7%BB%84/</guid>
      <description>python数据序列-元组 一、元组的定义与使用 1、为什么需要元组 如果想要存储多个数据，但是这些数据是不能修改的数据，可以使用元组，元组可以存</description>
    </item>
    
    <item>
      <title>python数据序列-字典</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/</link>
      <pubDate>Fri, 26 Aug 2022 01:37:56 +1140</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/</guid>
      <description>python数据序列-字典 1、为什么需要字典 如果要存储一个人的信息，姓名：Tom，年龄：20周岁，性别：男，如何快速存储。 1 person = [&amp;#39;Tom&amp;#39;, &amp;#39;20&amp;#39;, &amp;#39</description>
    </item>
    
    <item>
      <title>双指针算法</title>
      <link>http://helong0102.github.io/post/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 25 Aug 2022 01:37:56 +1800</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</guid>
      <description>双指针算法 基本思想 双指针算法的类型 双指针指向两个序列-类似于归并排序 双指针指向同一个序列-类似于快排 核心思想 算法模板 双指针算法的通用模板 示例</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>http://helong0102.github.io/post/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Thu, 25 Aug 2022 01:37:56 +1930</pubDate>
      
      <guid>http://helong0102.github.io/post/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>位运算 获取二进制的个位 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 代码示例（输出每位【10进制转二进制】） #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int n = 10; // 1010 for (int k = 3; k &amp;gt;= 0; k--) printf(&amp;#34;%d&amp;#34;,n</description>
    </item>
    
    <item>
      <title>离散化</title>
      <link>http://helong0102.github.io/post/%E7%A6%BB%E6%95%A3%E5%8C%96/</link>
      <pubDate>Thu, 25 Aug 2022 01:37:56 +2030</pubDate>
      
      <guid>http://helong0102.github.io/post/%E7%A6%BB%E6%95%A3%E5%8C%96/</guid>
      <description>离散化 的基本思想 算法模板 离散化的模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector&amp;lt;int&amp;gt; alls; // 存储所有待离散化的值 sort(alls.begin(), alls.end()); // 将所有值排序 // 其中unique(all</description>
    </item>
    
    <item>
      <title>区间合并</title>
      <link>http://helong0102.github.io/post/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</link>
      <pubDate>Thu, 25 Aug 2022 01:37:56 +2230</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</guid>
      <description>区间合并 的基本思想 示例运用 给定 n 个区间 [li,ri]，要求合并所有有交集的区间。 注意如果在端点处相交，也算有交集。 输出合并完成后的区间个数。</description>
    </item>
    
    <item>
      <title>python数据序列-列表</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%88%97%E8%A1%A8/</link>
      <pubDate>Wed, 24 Aug 2022 01:37:56 +1000</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%88%97%E8%A1%A8/</guid>
      <description>python数据序列-列表 一、列表及其应用场景 在Python中，我们把存储数据序列的数据类型称之为列表。但是在其他的编程语言中，如Java、</description>
    </item>
    
    <item>
      <title>前缀和&amp;差分</title>
      <link>http://helong0102.github.io/post/%E5%89%8D%E7%BC%80%E5%92%8C%E5%B7%AE%E5%88%86/</link>
      <pubDate>Wed, 24 Aug 2022 01:37:56 +1400</pubDate>
      
      <guid>http://helong0102.github.io/post/%E5%89%8D%E7%BC%80%E5%92%8C%E5%B7%AE%E5%88%86/</guid>
      <description>前缀和&amp;amp;差分 前缀和 基本思想 一维前缀和 注：其中S0 = 0的目的是为了计算的统一性，例如：求区间[1, x]的和，可以将表达式写为Sx - S0</description>
    </item>
    
    <item>
      <title>python数据序列-字符串</title>
      <link>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 17 Aug 2022 01:37:56 +1100</pubDate>
      
      <guid>http://helong0102.github.io/post/python%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>python数据序列-字符串 一、字符串 1、字符串的定义 字符串是 Python 中最常用的数据类型, 一般使用引号来创建字符串。创建字符串只要为变量分配一个值</description>
    </item>
    
    <item>
      <title>二分</title>
      <link>http://helong0102.github.io/post/%E4%BA%8C%E5%88%86/</link>
      <pubDate>Tue, 16 Aug 2022 01:37:56 +1000</pubDate>
      
      <guid>http://helong0102.github.io/post/%E4%BA%8C%E5%88%86/</guid>
      <description>二分 整数二分 基本思想 有单调性的题目一定可以二分，但是可以二分的题目不一定需要单调性。（二者没有必然联系） 单调性 二分本质 在区间里面只要能找到一</description>
    </item>
    
    <item>
      <title>高精度</title>
      <link>http://helong0102.github.io/post/%E9%AB%98%E7%B2%BE%E5%BA%A6/</link>
      <pubDate>Tue, 16 Aug 2022 01:37:56 +2200</pubDate>
      
      <guid>http://helong0102.github.io/post/%E9%AB%98%E7%B2%BE%E5%BA%A6/</guid>
      <description>高精度 应用场景(常见) 实现思路 大整数存储方式（C++） 计算过程 加法计算过程 减法计算过程 乘法计算过程 除法计算过程 代码模板 加法模板 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>vim教程</title>
      <link>http://helong0102.github.io/post/vim%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 15 Aug 2022 01:37:56 +1000</pubDate>
      
      <guid>http://helong0102.github.io/post/vim%E6%95%99%E7%A8%8B/</guid>
      <description>Vim 教程 功能 命令行模式下的文本编辑器。 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。 使用方式: vim filename 1. 如果已有该文件，则打开它。</description>
    </item>
    
    <item>
      <title>快速排序</title>
      <link>http://helong0102.github.io/post/quicksort/</link>
      <pubDate>Mon, 15 Aug 2022 01:37:56 +2200</pubDate>
      
      <guid>http://helong0102.github.io/post/quicksort/</guid>
      <description>快速排序&amp;mdash;基于分治 基本思想 l x r |------------------------------------------| 确定分界点：q[l],q[(l+r)/2],q[r],随机 调整区间： 1 2 3 ≤x ≥x l x r |--------------------|----------------------| 递归</description>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>http://helong0102.github.io/post/mergesort/</link>
      <pubDate>Mon, 15 Aug 2022 01:37:56 +2250</pubDate>
      
      <guid>http://helong0102.github.io/post/mergesort/</guid>
      <description>归并排序&amp;mdash;基于分治 基本思想 1 2 3 left mid right |---------------------------------------------|---------------------------------------------| 确定分界点 mid = ( l + r ) / 2。 递归排序left, right。 归并&amp;mdash;-把两个有</description>
    </item>
    
    <item>
      <title>Vandal工具批量处理合约代码</title>
      <link>http://helong0102.github.io/post/vandal%E5%B7%A5%E5%85%B7%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%90%88%E7%BA%A6%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 14 Aug 2022 01:37:56 +0940</pubDate>
      
      <guid>http://helong0102.github.io/post/vandal%E5%B7%A5%E5%85%B7%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%90%88%E7%BA%A6%E4%BB%A3%E7%A0%81/</guid>
      <description>扫描文件：sol文件版本号 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python # -*- coding: utf-8 -*- # solc.py def scan(fileName): # 打开文件 f = open(fileName, &amp;#39;r&amp;#39;) # 读取文件 lines = f.readlines() for line in lines: if (&amp;#34;pragma&amp;#34; in line): index = line.find(&amp;#34;.&amp;#34;) return line[index</description>
    </item>
    
    <item>
      <title>docker中使用oyente批量测试脚本</title>
      <link>http://helong0102.github.io/post/docker%E4%B8%AD%E4%BD%BF%E7%94%A8oyente%E6%89%B9%E9%87%8F%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sun, 14 Aug 2022 01:37:56 +1150</pubDate>
      
      <guid>http://helong0102.github.io/post/docker%E4%B8%AD%E4%BD%BF%E7%94%A8oyente%E6%89%B9%E9%87%8F%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</guid>
      <description>自动化脚本的使用 docker命令介绍 attach Attach to a running container # 当前 shell 下 attach 连接指定运行镜像 build Build an image from a Dockerfile # 通过 Dockerfile 定制镜像 commit Create a new image from a container changes # 提交当前容器为</description>
    </item>
    
    <item>
      <title>shell语法</title>
      <link>http://helong0102.github.io/post/shell%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 14 Aug 2022 01:37:56 +1456</pubDate>
      
      <guid>http://helong0102.github.io/post/shell%E8%AF%AD%E6%B3%95/</guid>
      <description>shell 语法 概论 shell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。 shell既是一种命令语言，又是一种程序设计语言。 shell是指一种应用</description>
    </item>
    
    <item>
      <title>管道&amp;环境变量&amp;常用命令</title>
      <link>http://helong0102.github.io/post/%E7%AE%A1%E9%81%93%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 14 Aug 2022 01:37:56 +2200</pubDate>
      
      <guid>http://helong0102.github.io/post/%E7%AE%A1%E9%81%93%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>管道&amp;amp;环境变量&amp;amp;常用命令 管道 概念 管道类似于文件重定向，可以将前一个命令的 stdout 重定向到下一个命令的 stdin。 要点 管道命令仅处理</description>
    </item>
    
  </channel>
</rss>
